AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: sadalsuud deployment cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters: 
  LambdaExecutionRole:
    Type: String
    Default: celestial-service-execution-role
    Description: The primary role in that gives the Lambda function permission to do its work.
  NodeJsVer:
    Type: String
    Default: nodejs14.x
  Project:
    Type: String
  Alias:
    Type: String
  TargetEnvr:
    Type: String
    Description: The target environment for API Gateway deployment.
  SubDomain:
    Type: String
  Domain:
    Type: String
Conditions: 
  IsProd: !Equals [ !Ref TargetEnvr, prod ]
Resources:
  ##############################################
  ##### API Gateway and associated Lambdas #####
  ##############################################
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${TargetEnvr}
      EndpointConfiguration: REGIONAL
      DefinitionBody: {
          "openapi": "3.0.1",
          "info": {
            "version": "2020-01-06T07:45:41Z",
            "title": !Sub "${Project}-${TargetEnvr}-api"
          },
          "paths": {
            "/api/question": {
              "post": {
                "parameters" : [ {
                  "name" : "x-api-token",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postQuestion"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-question/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "get": {
                "parameters" : [ {
                  "name" : "x-api-token",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-question/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/question/label": {
              "post": {
                "parameters" : [ {
                  "name" : "x-api-token",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postQuestionLabel"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-question/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "get": {
                "parameters" : [ {
                  "name" : "x-api-token",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-question/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/user": {
              "post": {
                "parameters" : [ {
                  "name" : "x-api-timestamp",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-user/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "get": {
                "parameters" : [ {
                  "name" : "x-api-token",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-user/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "put": {
                "parameters" : [ {
                  "name" : "x-api-token",
                  "in" : "header",
                  "required" : true,
                  "schema" : {
                    "type" : "string"
                  }
                } ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putUser"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:278497686406:function:${Project}-${TargetEnvr}-user/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            },
            "putUser": {
              "type" : "object",
              "required": ["nickname"],
              "properties": {
                "nickname": {"type": "string"}
              }
            },
            "postQuestion": {
              "type" : "object",
              "properties": {
                "labelId": {"type": "string"},
                "type": {"type": "string", "enum": ["T","S","M","F","E"]},
                "question": {"type": "string"},
                "answer": {"type": "string"}
              },
              "required": ["labelId","type","question"]
            },
            "postQuestionLabel": {
              "type" : "object",
              "properties": {
                "label": {"type": "string"}
              },
              "required": ["label"]
            }
          },
          "x-amazon-apigateway-request-validators" : {
            "Validate body, query string parameters, and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : true
            },
            "Validate query string parameters and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : false
            }
          }
        }
  LambdaQuestion:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.question
      Runtime: !Sub ${NodeJsVer}
      FunctionName: !Sub ${Project}-${TargetEnvr}-question
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          ENVR: !Sub ${TargetEnvr}
          ALIAS: !Sub ${Alias}
  InvokePermissionQuestion:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaQuestion]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-question
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaUser:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.user
      Runtime: !Sub ${NodeJsVer}
      FunctionName: !Sub ${Project}-${TargetEnvr}-user
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          ENVR: !Sub ${TargetEnvr}
          ALIAS: !Sub ${Alias}
  InvokePermissionUser:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaUser]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-user
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  #########################################
  ##### Cloudfront and Route53 config #####
  #########################################
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${Project}-${TargetEnvr}-OAI
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${Domain}.'
      Name: !If [IsProd, !Sub '${SubDomain}.${Domain}.', !Sub '${SubDomain}-${TargetEnvr}.${Domain}.']
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt
        - CloudFrontDistribution
        - DomainName
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: [ServerlessApi, S3Bucket]
    Properties:
      DistributionConfig:
        Aliases: [!If [IsProd, !Sub '${SubDomain}.${Domain}', !Sub '${SubDomain}-${TargetEnvr}.${Domain}']]
        Origins:
        - DomainName: !Sub ${Project}-${TargetEnvr}-y.s3.ap-northeast-1.amazonaws.com
          Id: S3-hosted-website-ID
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        - DomainName: !Sub '${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com'
          Id: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          OriginPath: !Sub /${TargetEnvr}
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginKeepaliveTimeout: 5
            OriginProtocolPolicy: https-only
        Enabled: 'true'
        HttpVersion: http2
        CustomErrorResponses:
        - ErrorCachingMinTTL: 300
          ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCachingMinTTL: 300
          ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          TargetOriginId: S3-hosted-website-ID
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        CacheBehaviors:
        - PathPattern: /api/*
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          ForwardedValues:
            Headers: [ "Authorization", "Accept" ]
            QueryString: true
          TargetOriginId: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:278497686406:certificate/8914c993-68c7-4e06-b741-def8fc0270ba
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
  ####################################
  ##### S3 Bucket and its policy #####
  ####################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${TargetEnvr}-y
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: [CloudFrontOriginAccessIdentity]
    Properties:
      Bucket: !Sub ${Project}-${TargetEnvr}-y
      PolicyDocument: !Join
      - ''
      - - '{
            "Version": "2012-10-17",
            "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [
                {
                    "Sid": "Allow-OAI-Access-To-Bucket",
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
        - !Ref CloudFrontOriginAccessIdentity
        - '" },
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::'
        - !Sub ${Project}-${TargetEnvr}-y
        - '/*"
                }
            ]
          }'
